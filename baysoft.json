{
  "Name": "Store",
  "DisplayName": "Store",
  "Contexts": [
    {
      "Name": "Store",
      "DisplayName": "Store",
      "Schema": "Store",
      "Entities": [
        {
          "Name": "Customer",
          "DisplayName": "Cliente",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Name",
              "DisplayName": "Nome",
              "Type": "string",
              "DbName": "Name",
              "DbType": "VARCHAR(64)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Email",
              "DisplayName": "E-mail",
              "Type": "string",
              "DbName": "Email",
              "DbType": "VARCHAR(128)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "RegisteredAt",
              "DisplayName": "Registrado em",
              "Type": "DateTime",
              "DbName": "RegiteredAt",
              "DbType": "DATETIME",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "Email",
                "DisplayName": "E-mail",
                "Type": "string",
                "DbName": "Email",
                "DbType": "VARCHAR(128)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "RegisteredAt",
                "DisplayName": "Registrado em",
                "Type": "DateTime",
                "DbName": "RegiteredAt",
                "DbType": "DATETIME",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "LessThan(DateTime.Now.Date)",
              "Message": "\u0027{0}\u0027 must be lesse than \u0027{1}\u0027!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "Email",
                "DisplayName": "E-mail",
                "Type": "string",
                "DbName": "Email",
                "DbType": "VARCHAR(128)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "RegisteredAt",
                "DisplayName": "Registrado em",
                "Type": "DateTime",
                "DbName": "RegiteredAt",
                "DbType": "DATETIME",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "LessThan(DateTime.Now.Date)",
              "Message": "\u0027{0}\u0027 must be lesse than \u0027{1}\u0027!"
            }
          ],
          "Specifications": [
            {
              "Name": "CustomerEmailMustBeUnique",
              "Message": "Email already in use!",
              "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
            }
          ],
          "Services": [
            {
              "Name": "CreateCustomer",
              "Specifications": [
                {
                  "Name": "CustomerEmailMustBeUnique",
                  "Message": "Email already in use!",
                  "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
                }
              ]
            },
            {
              "Name": "UpdateCustomer",
              "Specifications": [
                {
                  "Name": "CustomerEmailMustBeUnique",
                  "Message": "Email already in use!",
                  "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
                }
              ]
            },
            {
              "Name": "DeleteCustomer",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostCustomer",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateCustomer",
                "Specifications": [
                  {
                    "Name": "CustomerEmailMustBeUnique",
                    "Message": "Email already in use!",
                    "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "Email",
                    "DisplayName": "E-mail",
                    "Type": "string",
                    "DbName": "Email",
                    "DbType": "VARCHAR(128)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                }
              ]
            },
            {
              "Name": "PutCustomer",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateCustomer",
                "Specifications": [
                  {
                    "Name": "CustomerEmailMustBeUnique",
                    "Message": "Email already in use!",
                    "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "Email",
                    "DisplayName": "E-mail",
                    "Type": "string",
                    "DbName": "Email",
                    "DbType": "VARCHAR(128)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "RegisteredAt",
                    "DisplayName": "Registrado em",
                    "Type": "DateTime",
                    "DbName": "RegiteredAt",
                    "DbType": "DATETIME",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "LessThan(DateTime.Now.Date)",
                  "Message": "\u0027{0}\u0027 must be lesse than \u0027{1}\u0027!"
                }
              ]
            },
            {
              "Name": "PatchCustomer",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateCustomer",
                "Specifications": [
                  {
                    "Name": "CustomerEmailMustBeUnique",
                    "Message": "Email already in use!",
                    "Rule": "return customer =\u003E Reader.Query\u003CCustomer\u003E().Any(c =\u003E c.Email.ToLower().Equals(customer.Email.ToLower()) \u0026\u0026 c.Id != customer.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteCustomer",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteCustomer",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        },
        {
          "Name": "Order",
          "DisplayName": "Pedido",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "RedisteredAt",
              "DisplayName": "Registrado em",
              "Type": "DateTime",
              "DbName": "RegisteredAt",
              "DbType": "DATETIME",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "ConfirmedAt",
              "DisplayName": "Confirmado em",
              "Type": "DateTime",
              "DbName": "ConfirmedAt",
              "DbType": "DATETIME",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "CancelledAt",
              "DisplayName": "Cancelado em",
              "Type": "DateTime",
              "DbName": "CancelledAt",
              "DbType": "DATETIME",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "CustomerId",
              "DisplayName": "Cliente",
              "Type": "int",
              "DbName": "CustomerId",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Customer"
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "RedisteredAt",
                "DisplayName": "Registrado em",
                "Type": "DateTime",
                "DbName": "RegisteredAt",
                "DbType": "DATETIME",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "LessThan(DateTime.Now.Date)",
              "Message": "\u0027{0}\u0027 cannot be less than \u0027{1}\u0027!"
            },
            {
              "Property": {
                "Name": "CustomerId",
                "DisplayName": "Cliente",
                "Type": "int",
                "DbName": "CustomerId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Customer"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "RedisteredAt",
                "DisplayName": "Registrado em",
                "Type": "DateTime",
                "DbName": "RegisteredAt",
                "DbType": "DATETIME",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "LessThan(DateTime.Now.Date)",
              "Message": "\u0027{0}\u0027 cannot be less than \u0027{1}\u0027!"
            },
            {
              "Property": {
                "Name": "CustomerId",
                "DisplayName": "Cliente",
                "Type": "int",
                "DbName": "CustomerId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Customer"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "Specifications": [
          ],
          "Services": [
            {
              "Name": "CreateOrder",
              "Specifications": [
              ]
            },
            {
              "Name": "UpdateOrder",
              "Specifications": [
              ]
            },
            {
              "Name": "DeleteOrder",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostOrder",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateOrder",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "CustomerId",
                    "DisplayName": "Cliente",
                    "Type": "int",
                    "DbName": "CustomerId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Customer"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PutOrder",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateOrder",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "RedisteredAt",
                    "DisplayName": "Registrado em",
                    "Type": "DateTime",
                    "DbName": "RegisteredAt",
                    "DbType": "DATETIME",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "LessThan(DateTime.Now.Date)",
                  "Message": "\u0027{0}\u0027 cannot be less than \u0027{1}\u0027!"
                },
                {
                  "Property": {
                    "Name": "CustomerId",
                    "DisplayName": "Cliente",
                    "Type": "int",
                    "DbName": "CustomerId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Customer"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PatchOrder",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateOrder",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteOrder",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteOrder",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        },
        {
          "Name": "Category",
          "DisplayName": "Categoria",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Name",
              "DisplayName": "Nome",
              "Type": "string",
              "DbName": "Name",
              "DbType": "VARCHAR(64)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Description",
              "DisplayName": "Descri\u00E7\u00E3o",
              "Type": "string",
              "DbName": "Description",
              "DbType": "VARCHAR(512)",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "RootCategoryId",
              "DisplayName": "Categoria pai",
              "Type": "int",
              "DbName": "RootCategoryId",
              "DbType": "INT",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Category"
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            }
          ],
          "Specifications": [
            {
              "Name": "CategoryAlreadyExistsOnRootCategory",
              "Message": "A category with that name already exists on the root category!",
              "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
            }
          ],
          "Services": [
            {
              "Name": "CreateCategory",
              "Specifications": [
                {
                  "Name": "CategoryAlreadyExistsOnRootCategory",
                  "Message": "A category with that name already exists on the root category!",
                  "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
                }
              ]
            },
            {
              "Name": "UpdateCategory",
              "Specifications": [
                {
                  "Name": "CategoryAlreadyExistsOnRootCategory",
                  "Message": "A category with that name already exists on the root category!",
                  "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
                }
              ]
            },
            {
              "Name": "DeleteCategory",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostCategory",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateCategory",
                "Specifications": [
                  {
                    "Name": "CategoryAlreadyExistsOnRootCategory",
                    "Message": "A category with that name already exists on the root category!",
                    "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                }
              ]
            },
            {
              "Name": "PutCategory",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateCategory",
                "Specifications": [
                  {
                    "Name": "CategoryAlreadyExistsOnRootCategory",
                    "Message": "A category with that name already exists on the root category!",
                    "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                }
              ]
            },
            {
              "Name": "PatchCategory",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateCategory",
                "Specifications": [
                  {
                    "Name": "CategoryAlreadyExistsOnRootCategory",
                    "Message": "A category with that name already exists on the root category!",
                    "Rule": "return category =\u003E Reader.Query\u003CCategory\u003E().Any(c =\u003E c.Name.ToLower().Equals(category.Name.ToLower()) \u0026\u0026 c.RootCategoryId == category.RootCategoryId \u0026\u0026 c.Id != category.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteCategory",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteCategory",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        },
        {
          "Name": "Product",
          "DisplayName": "Produto",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Name",
              "DisplayName": "Nome",
              "Type": "string",
              "DbName": "Name",
              "DbType": "VARCHAR(64)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Description",
              "DisplayName": "Descri\u00E7\u00E3o",
              "Type": "string",
              "DbName": "Description",
              "DbType": "VARCHAR(8000)",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Specifications",
              "DisplayName": "Especifica\u00E7\u00F5es",
              "Type": "string",
              "DbName": "Specifications",
              "DbType": "VARCHAR(8000)",
              "IsNullable": true,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Amount",
              "DisplayName": "Quantidade",
              "Type": "int",
              "DbName": "Amount",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Value",
              "DisplayName": "Valor",
              "Type": "decimal",
              "DbName": "Value",
              "DbType": "DECIMAL(12,2)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "RegisteredAt",
              "DisplayName": "Registrado em",
              "Type": "DateTime",
              "DbName": "RegisteredAt",
              "DbType": "DATETIME",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "IsVisible",
              "DisplayName": "Vis\u00EDvel",
              "Type": "bool",
              "DbName": "IsVisible",
              "DbType": "BIT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "CategoryId",
              "DisplayName": "Categoria",
              "Type": "int",
              "DbName": "CategoryId",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Category"
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "Amount",
                "DisplayName": "Quantidade",
                "Type": "int",
                "DbName": "Amount",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Name",
                "DisplayName": "Nome",
                "Type": "string",
                "DbName": "Name",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "Amount",
                "DisplayName": "Quantidade",
                "Type": "int",
                "DbName": "Amount",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "Specifications": [
            {
              "Name": "ProductNameAlreadyExists",
              "Message": "Already exits a product with this name!",
              "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
            }
          ],
          "Services": [
            {
              "Name": "CreateProduct",
              "Specifications": [
                {
                  "Name": "ProductNameAlreadyExists",
                  "Message": "Already exits a product with this name!",
                  "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
                }
              ]
            },
            {
              "Name": "UpdateProduct",
              "Specifications": [
                {
                  "Name": "ProductNameAlreadyExists",
                  "Message": "Already exits a product with this name!",
                  "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
                }
              ]
            },
            {
              "Name": "DeleteProduct",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostProduct",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateProduct",
                "Specifications": [
                  {
                    "Name": "ProductNameAlreadyExists",
                    "Message": "Already exits a product with this name!",
                    "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "Amount",
                    "DisplayName": "Quantidade",
                    "Type": "int",
                    "DbName": "Amount",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PutProduct",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateProduct",
                "Specifications": [
                  {
                    "Name": "ProductNameAlreadyExists",
                    "Message": "Already exits a product with this name!",
                    "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Name",
                    "DisplayName": "Nome",
                    "Type": "string",
                    "DbName": "Name",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "Amount",
                    "DisplayName": "Quantidade",
                    "Type": "int",
                    "DbName": "Amount",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PatchProduct",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateProduct",
                "Specifications": [
                  {
                    "Name": "ProductNameAlreadyExists",
                    "Message": "Already exits a product with this name!",
                    "Rule": "product =\u003E Reader.Query\u003CProduct\u003E().Any(p =\u003E p.Name.ToLower().Equals(product.Name.ToLower()) \u0026\u0026 p.Id != product.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteProduct",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteProduct",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        },
        {
          "Name": "Image",
          "DisplayName": "Imagem",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Url",
              "DisplayName": "Endere\u00E7o",
              "Type": "string",
              "DbName": "Url",
              "DbType": "VARCHAR(512)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "MimeType",
              "DisplayName": "Tipo de conte\u00FAdo",
              "Type": "string",
              "DbName": "MimeType",
              "DbType": "VARHCAR(64)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "ProductId",
              "DisplayName": "Produto",
              "Type": "int",
              "DbName": "ProductId",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Product"
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Url",
                "DisplayName": "Endere\u00E7o",
                "Type": "string",
                "DbName": "Url",
                "DbType": "VARCHAR(512)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "MimeType",
                "DisplayName": "Tipo de conte\u00FAdo",
                "Type": "string",
                "DbName": "MimeType",
                "DbType": "VARHCAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "ProductId",
                "DisplayName": "Produto",
                "Type": "int",
                "DbName": "ProductId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Product"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Url",
                "DisplayName": "Endere\u00E7o",
                "Type": "string",
                "DbName": "Url",
                "DbType": "VARCHAR(512)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "MimeType",
                "DisplayName": "Tipo de conte\u00FAdo",
                "Type": "string",
                "DbName": "MimeType",
                "DbType": "VARHCAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            },
            {
              "Property": {
                "Name": "ProductId",
                "DisplayName": "Produto",
                "Type": "int",
                "DbName": "ProductId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Product"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "Specifications": [
            {
              "Name": "ImageUrlAlreadyExists",
              "Message": "A image with this url already exists!",
              "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
            }
          ],
          "Services": [
            {
              "Name": "CreateImage",
              "Specifications": [
                {
                  "Name": "ImageUrlAlreadyExists",
                  "Message": "A image with this url already exists!",
                  "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
                }
              ]
            },
            {
              "Name": "UpdateImage",
              "Specifications": [
                {
                  "Name": "ImageUrlAlreadyExists",
                  "Message": "A image with this url already exists!",
                  "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
                }
              ]
            },
            {
              "Name": "DeleteImage",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostImage",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateImage",
                "Specifications": [
                  {
                    "Name": "ImageUrlAlreadyExists",
                    "Message": "A image with this url already exists!",
                    "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Url",
                    "DisplayName": "Endere\u00E7o",
                    "Type": "string",
                    "DbName": "Url",
                    "DbType": "VARCHAR(512)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "MimeType",
                    "DisplayName": "Tipo de conte\u00FAdo",
                    "Type": "string",
                    "DbName": "MimeType",
                    "DbType": "VARHCAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "ProductId",
                    "DisplayName": "Produto",
                    "Type": "int",
                    "DbName": "ProductId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Product"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PutImage",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateImage",
                "Specifications": [
                  {
                    "Name": "ImageUrlAlreadyExists",
                    "Message": "A image with this url already exists!",
                    "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Url",
                    "DisplayName": "Endere\u00E7o",
                    "Type": "string",
                    "DbName": "Url",
                    "DbType": "VARCHAR(512)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "MimeType",
                    "DisplayName": "Tipo de conte\u00FAdo",
                    "Type": "string",
                    "DbName": "MimeType",
                    "DbType": "VARHCAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                },
                {
                  "Property": {
                    "Name": "ProductId",
                    "DisplayName": "Produto",
                    "Type": "int",
                    "DbName": "ProductId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Product"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PatchImage",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateImage",
                "Specifications": [
                  {
                    "Name": "ImageUrlAlreadyExists",
                    "Message": "A image with this url already exists!",
                    "Rule": "return image =\u003E Reader.Query\u003CImage\u003E().Any(i =\u003E i.url.ToLower().Equals(image.Url.ToLower()) \u0026\u0026 i.Id != image.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteImage",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteImage",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        },
        {
          "Name": "OrderedProduct",
          "DisplayName": "Produtos no pedido",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Amount",
              "DisplayName": "Quantidade",
              "Type": "int",
              "DbName": "Amount",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Value",
              "DisplayName": "Valor",
              "Type": "decimal",
              "DbName": "Value",
              "DbType": "DECIMAL(12,2)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "RegisteredAt",
              "DisplayName": "Registrado em",
              "Type": "DateTime",
              "DbName": "RegisteredAt",
              "DbType": "DATETIME",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "ProductId",
              "DisplayName": "Produto",
              "Type": "int",
              "DbName": "ProductId",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Product"
            },
            {
              "Name": "OrderId",
              "DisplayName": "Pedido",
              "Type": "int",
              "DbName": "OrderId",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": true,
              "RelatedEntityName": "Order"
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEqual(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Amount",
                "DisplayName": "Quantidade",
                "Type": "int",
                "DbName": "Amount",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "ProductId",
                "DisplayName": "Produto",
                "Type": "int",
                "DbName": "ProductId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Product"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "OrderId",
                "DisplayName": "Pedido",
                "Type": "int",
                "DbName": "OrderId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Order"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Amount",
                "DisplayName": "Quantidade",
                "Type": "int",
                "DbName": "Amount",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "ProductId",
                "DisplayName": "Produto",
                "Type": "int",
                "DbName": "ProductId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Product"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "OrderId",
                "DisplayName": "Pedido",
                "Type": "int",
                "DbName": "OrderId",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": true,
                "RelatedEntityName": "Order"
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            }
          ],
          "Specifications": [
            {
              "Name": "OrderedProductHasFreeAmount",
              "Message": "Produto does not have free amount!",
              "Rule": "return true;"
            }
          ],
          "Services": [
            {
              "Name": "CreateOrderedProduct",
              "Specifications": [
                {
                  "Name": "OrderedProductHasFreeAmount",
                  "Message": "Produto does not have free amount!",
                  "Rule": "return true;"
                }
              ]
            },
            {
              "Name": "UpdateOrderedProduct",
              "Specifications": [
                {
                  "Name": "OrderedProductHasFreeAmount",
                  "Message": "Produto does not have free amount!",
                  "Rule": "return true;"
                }
              ]
            },
            {
              "Name": "DeleteOrderedProduct",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostOrderedProduct",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateOrderedProduct",
                "Specifications": [
                  {
                    "Name": "OrderedProductHasFreeAmount",
                    "Message": "Produto does not have free amount!",
                    "Rule": "return true;"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Amount",
                    "DisplayName": "Quantidade",
                    "Type": "int",
                    "DbName": "Amount",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "ProductId",
                    "DisplayName": "Produto",
                    "Type": "int",
                    "DbName": "ProductId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Product"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "OrderId",
                    "DisplayName": "Pedido",
                    "Type": "int",
                    "DbName": "OrderId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Order"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PutOrderedProduct",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateOrderedProduct",
                "Specifications": [
                  {
                    "Name": "OrderedProductHasFreeAmount",
                    "Message": "Produto does not have free amount!",
                    "Rule": "return true;"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEqual(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Amount",
                    "DisplayName": "Quantidade",
                    "Type": "int",
                    "DbName": "Amount",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "ProductId",
                    "DisplayName": "Produto",
                    "Type": "int",
                    "DbName": "ProductId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Product"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "OrderId",
                    "DisplayName": "Pedido",
                    "Type": "int",
                    "DbName": "OrderId",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": true,
                    "RelatedEntityName": "Order"
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "PatchOrderedProduct",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateOrderedProduct",
                "Specifications": [
                  {
                    "Name": "OrderedProductHasFreeAmount",
                    "Message": "Produto does not have free amount!",
                    "Rule": "return true;"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEqual(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteOrderedProduct",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteOrderedProduct",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEqual(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "Name": "Default",
      "DisplayName": "Default",
      "Schema": "DefaultDb",
      "Entities": [
        {
          "Name": "Sample",
          "DisplayName": "Sample",
          "GetById": true,
          "GetByFilter": true,
          "Properties": [
            {
              "Name": "Id",
              "DisplayName": "Identificador",
              "Type": "int",
              "DbName": "Id",
              "DbType": "INT",
              "IsNullable": false,
              "IsDbGenerated": true,
              "IsPrimaryKey": true,
              "IsForeignKey": false,
              "RelatedEntityName": null
            },
            {
              "Name": "Description",
              "DisplayName": "Description",
              "Type": "string",
              "DbName": "Description",
              "DbType": "VARCHAR(64)",
              "IsNullable": false,
              "IsDbGenerated": false,
              "IsPrimaryKey": false,
              "IsForeignKey": false,
              "RelatedEntityName": null
            }
          ],
          "EntityRules": [
            {
              "Property": {
                "Name": "Id",
                "DisplayName": "Identificador",
                "Type": "int",
                "DbName": "Id",
                "DbType": "INT",
                "IsNullable": false,
                "IsDbGenerated": true,
                "IsPrimaryKey": true,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEquals(0)",
              "Message": "\u0027{0}\u0027 cannot be 0!"
            },
            {
              "Property": {
                "Name": "Description",
                "DisplayName": "Description",
                "Type": "string",
                "DbName": "Description",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            }
          ],
          "ValidationRules": [
            {
              "Property": {
                "Name": "Description",
                "DisplayName": "Description",
                "Type": "string",
                "DbName": "Description",
                "DbType": "VARCHAR(64)",
                "IsNullable": false,
                "IsDbGenerated": false,
                "IsPrimaryKey": false,
                "IsForeignKey": false,
                "RelatedEntityName": null
              },
              "Rule": "NotEmpty()",
              "Message": "\u0027{0}\u0027 cannot be empty!"
            }
          ],
          "Specifications": [
            {
              "Name": "SampleDescriptionAlreadyExists",
              "Message": "A register with that description already exists!",
              "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
            }
          ],
          "Services": [
            {
              "Name": "CreateSample",
              "Specifications": [
                {
                  "Name": "SampleDescriptionAlreadyExists",
                  "Message": "A register with that description already exists!",
                  "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
                }
              ]
            },
            {
              "Name": "UpdateSample",
              "Specifications": [
                {
                  "Name": "SampleDescriptionAlreadyExists",
                  "Message": "A register with that description already exists!",
                  "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
                }
              ]
            },
            {
              "Name": "DeleteSample",
              "Specifications": [
              ]
            }
          ],
          "Commands": [
            {
              "Name": "PostSample",
              "HttpMethod": "Post",
              "Service": {
                "Name": "CreateSample",
                "Specifications": [
                  {
                    "Name": "SampleDescriptionAlreadyExists",
                    "Message": "A register with that description already exists!",
                    "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Description",
                    "DisplayName": "Description",
                    "Type": "string",
                    "DbName": "Description",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                }
              ]
            },
            {
              "Name": "PutSample",
              "HttpMethod": "Put",
              "Service": {
                "Name": "UpdateSample",
                "Specifications": [
                  {
                    "Name": "SampleDescriptionAlreadyExists",
                    "Message": "A register with that description already exists!",
                    "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                },
                {
                  "Property": {
                    "Name": "Description",
                    "DisplayName": "Description",
                    "Type": "string",
                    "DbName": "Description",
                    "DbType": "VARCHAR(64)",
                    "IsNullable": false,
                    "IsDbGenerated": false,
                    "IsPrimaryKey": false,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEmpty()",
                  "Message": "\u0027{0}\u0027 cannot be empty!"
                }
              ]
            },
            {
              "Name": "PatchSample",
              "HttpMethod": "Patch",
              "Service": {
                "Name": "UpdateSample",
                "Specifications": [
                  {
                    "Name": "SampleDescriptionAlreadyExists",
                    "Message": "A register with that description already exists!",
                    "Rule": "return sample =\u003E Reader.Query\u003CSample\u003E().Any(s =\u003E s.Description.ToLower().Equals(sample.Description.ToLower()) \u0026\u0026 s.Id != sample.Id);"
                  }
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            },
            {
              "Name": "DeleteSample",
              "HttpMethod": "Delete",
              "Service": {
                "Name": "DeleteSample",
                "Specifications": [
                ]
              },
              "ValidationRules": [
                {
                  "Property": {
                    "Name": "Id",
                    "DisplayName": "Identificador",
                    "Type": "int",
                    "DbName": "Id",
                    "DbType": "INT",
                    "IsNullable": false,
                    "IsDbGenerated": true,
                    "IsPrimaryKey": true,
                    "IsForeignKey": false,
                    "RelatedEntityName": null
                  },
                  "Rule": "NotEquals(0)",
                  "Message": "\u0027{0}\u0027 cannot be 0!"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}